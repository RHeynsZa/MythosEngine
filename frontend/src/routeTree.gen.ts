/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestUploadRouteImport } from './routes/test-upload'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as ProfileUsernameRouteImport } from './routes/profile/$username'
import { Route as ProjectsProjectIdIndexRouteImport } from './routes/projects/$projectId/index'
import { Route as ProjectsProjectIdArticleIdIndexRouteImport } from './routes/projects/$projectId/$articleId/index'

const TestUploadRoute = TestUploadRouteImport.update({
  id: '/test-upload',
  path: '/test-upload',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileUsernameRoute = ProfileUsernameRouteImport.update({
  id: '/profile/$username',
  path: '/profile/$username',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexRouteImport.update({
  id: '/projects/$projectId/',
  path: '/projects/$projectId/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdArticleIdIndexRoute =
  ProjectsProjectIdArticleIdIndexRouteImport.update({
    id: '/projects/$projectId/$articleId/',
    path: '/projects/$projectId/$articleId/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/test-upload': typeof TestUploadRoute
  '/profile/$username': typeof ProfileUsernameRoute
  '/profile': typeof ProfileIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/$articleId': typeof ProjectsProjectIdArticleIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/test-upload': typeof TestUploadRoute
  '/profile/$username': typeof ProfileUsernameRoute
  '/profile': typeof ProfileIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/$articleId': typeof ProjectsProjectIdArticleIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/test-upload': typeof TestUploadRoute
  '/profile/$username': typeof ProfileUsernameRoute
  '/profile/': typeof ProfileIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/$articleId/': typeof ProjectsProjectIdArticleIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/test-upload'
    | '/profile/$username'
    | '/profile'
    | '/projects'
    | '/projects/$projectId'
    | '/projects/$projectId/$articleId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/test-upload'
    | '/profile/$username'
    | '/profile'
    | '/projects'
    | '/projects/$projectId'
    | '/projects/$projectId/$articleId'
  id:
    | '__root__'
    | '/'
    | '/test-upload'
    | '/profile/$username'
    | '/profile/'
    | '/projects/'
    | '/projects/$projectId/'
    | '/projects/$projectId/$articleId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TestUploadRoute: typeof TestUploadRoute
  ProfileUsernameRoute: typeof ProfileUsernameRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
  ProjectsProjectIdArticleIdIndexRoute: typeof ProjectsProjectIdArticleIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test-upload': {
      id: '/test-upload'
      path: '/test-upload'
      fullPath: '/test-upload'
      preLoaderRoute: typeof TestUploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$username': {
      id: '/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof ProfileUsernameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/$articleId/': {
      id: '/projects/$projectId/$articleId/'
      path: '/projects/$projectId/$articleId'
      fullPath: '/projects/$projectId/$articleId'
      preLoaderRoute: typeof ProjectsProjectIdArticleIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TestUploadRoute: TestUploadRoute,
  ProfileUsernameRoute: ProfileUsernameRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
  ProjectsProjectIdArticleIdIndexRoute: ProjectsProjectIdArticleIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
